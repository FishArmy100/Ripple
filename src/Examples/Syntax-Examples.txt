
//------------- Basic Data Types -------------
// operators: +, -, *, /, %
int intager = 5;

// operators: +, -, *, /
float decimal = 1.5;

// operators: &&, ||, !
bool isTrue = false;

char charactor = 'c';

char^ string = "Hello World!";

// bit operators: |, &, ^, ~, <<, >>

//------------- Normal Values -------------
// value type, is copyed implicitly
int value = 5;

// mannaged pointer, is garbage collected
int^ ptrValue = new int(5);

// reference, can only exist in functions, and cant be returned from a function if created there
int& refValue = value;

// pointer dereferencing, same as c++
int& ref = ^ptrValue;

// Control flow
// Loops and if statements are in the same vein as c++ and c#
// List of supported types: while, for, if, else

//------------- Arrays -------------

// heap allocated array
// same data as stack allocated array
int^ array = new int[10](-1) {3, 4, 5};

// array indexing
int& val = array[0];

// array slices:
// referencing same data in array
int^ slice = hArr[2..3];

// can get the number of items in the array
int length1 = array.Length();

//------------- Function Pointers -------------
// function pointers
int(int, int)^ funcPrtName = FuncName;

//called by
int data = funcPrtName(5, 6);

//------------- Const Types -------------
// immutable, cant be changed
const int value = 1; 

// error
value = 2;

const int& ref = value;

// error
ref = 2;

// error
ref = value;

//------------- Nullable Types -------------
// can be set to null
int? nullable = 1;
nullable = null;

// Cannot have nullable references:
int&?

// Can have references to nullable types
int?&

// Can have nullable pointers
int^?

// Can have pointers to nullable types
int?^ example = new int?(null);

//------------- Classes -------------

class BaseClassName
{
	// virtual functions can be overloaded
	// protected can only be accesed by inheriting classes
	protected virtual void Overidable() {}

	// static functions can be called without an instance
	public static void StaticFunc() {}
}

class ClassName : BaseTypeName
{
	// private member can only be accsessed by class
	private int DataValue;
	public const char^ Message; // immutable member

	// constructor
	public ClassName(int data, const char^ message)
	{
		DataValue = data;

		// immutable member can be set in constructors
		Message = message;
	}

	public void SetData(int data) // function
	{
		DataValue = data;
	}

	// const member functions can be
	// called on const veriables
	public int GetData(int data) const
	{
		return data;
	}

	// overriden function
	protected override void Overidable()
	{
		
	}
}

//------------- Traits -------------

// Traits contain funtions that can be implemented for different classes
// public by default
trait Callable
{
	// Function deffenition, can have default implementation
	void Call();
}

// traits can inherit from other traits
trait Example : Callable {}

// traits can be implemented outside of classes
class Messenger()
{
	public int data;
}

impl Callable for Messenger
{
	void Call()
	{
		print(data); // has access to protected members???
	}
}

// classes can implement traits by default, must be implemented in class
class Telephone : Callable
{
	 // becuase public, all classes outside 
	 // can tell it implements Callable
	public impl Callable
	{
		void Call()
		{
			print("Called telephone");
		}
	}
}

//------------- Heirarchial Casting -------------
// can cast pointers and references up and down the hierarchy

class Animal {}

class Bear : Animal {}

// implicit
Animal^ animal = new Bear();

// explisit
// will throw an error if animal is not a bear
Bear^ bear = (Bear^)animal;

// ------------- Trait Casting -------------
// works the same as heirarchial casting, but with traits

class Telephone {}

trait Callable {}

impl Callable for Telephone {}

Callable^ call = new Telephone();
Telephone^ tele = (Telephone^)call;

//------------- Size Of Operator -------------
// Gets the number of bytes that a type has, or the instance of a pointer
// can get the size of a type in bytes:
 int size = size_of<int>() // returns 4

 // can get the size of a instance of an object;
 char value = 5;
 int size = size_of(value); // returns 1

 // can get the allocation size of a pointer:
 int^ array = new int[4](0);
 int size = size_of(array); // returns 16

 // length of an array can be found by
 int length = size_of(array) / size_of<ArrayType>();

//------------- Reinterpret Cast Of Operator -------------
// Interprets the data of a pointer as a pointer to another type

int^ number = new int(5);
char^ charArray = reinterpret_cast<char>(number, 4);

// the output must be the size of the input, otherwise will throw an error
4 * size_of<char>() == size_of(number);

//------------- Panic Statement -------------
// imeadiatly halts exicution of the program if exicuted on the main thread

panic("Put error message here");


//------------- Standard Library -------------
// Currently only supports print function
print("Hello World!");
