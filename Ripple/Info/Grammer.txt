// Using the Maple Syntax


grammer Ripple
{
	// Utilites:
	Parameters = "(" (TypeName Identifier ("," TypeName Identifier))* ")"
	ExpressionList = Expression ("," Expression)*
	TypeList = TypeName ("," TypeName)*

	IntLiteral = DIGIT+;
	FloatLiteral = DIGIT+ "." DIGIT+;
	CharLiteral = "\'" CHARACTOR "\'";
	StringLiteral = C_STRING_LITERAL;

	// Types:
	GroupedType = "(" TypeName ")";
	PointerType = TypeName "*";
	ReferenceType = TypeName "&";
	FuncPtr = "(" TypeList ")" "->" TypeName
	TypeName = GroupedType | PointerType | ReferenceType | FuncPtr | IDENTIFIER

	// Expressions:
	InitalizerList = "{" ExpressionList "}";

	Grouping = "(" Expression ")";

	Primary = IntLiteral		|
	          FloatLiteral		|
			  Grouping			|
			  "true"			|
			  "false"			|
			  StringLiteral		|
			  CharLiteral		|
			  IDENTIFIER		|
			  InitalizerList;

	Call = Expression "(" ExpressionList? ")";
	Index = Expression "[" Expression "]";

	Unary = ("!" | "-" | "&" | "*") Unary | (Call | Index);

	Factor = Unary (("*" | "/" | "%") Unary)*
	Term = Factor (("+" | "-") Factor)*
	Comparison = Factor ((">=" | ">" | "<" | "<=") Factor)*
	Equality = Comparison (("!=" | "==") Comparison)*;

	LogicalAnd = Equality ("&&" Equality)*;
	LogicalOr = LogicalAnd ("||" LogicalOr)*;

	Casting = LogicalOr ("as" TypeName)*

	Assignment = IDENTIFIER "=" Assignment | Casting;

	Expression = Assignment;

	// Statements:
	ExprStmt = Expression ";";
	Block = "{" Statement* "}";
	IfStmt = "if" "(" Expression ")" Statement;
	ForStmt = "for" "(" VarDecl? ";" Expression? ";" Expression? ";" ")" Statement;
	WhileStmt = "while" "(" Expression ")" Statement;
	ReturnStmt = "return" Expression? ";";
	BreakStmt = "break" ";";
	ContinueStmt = "continue" ";";

	VarDecl = TypeName IDENTIFIER ("," IDENTIFIER)* "=" Expression ";";
	FuncDecl = "func" IDENTIFIER Parameters "->" TypeName Block;
	ExternFuncDecl = "extern" StringLiteral "func" IDENTIFIER Parameters "->"  TypeName ";";

	Statement = ExprStmt | Block | IfStmt | ForStmt | WhileStmt | VarDecl | ReturnStmt | ContinueStmt | BreakStmt;
	Declaration = VarDecl | FuncDecl | ExternFuncDecl;

	File = Declaration* EOF;

	main Program = File*;
}