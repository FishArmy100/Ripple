// Using the Maple Syntax


grammer Ripple
{
	// Utilites:
	Parameters = "(" (TypeName Identifier ("," TypeName Identifier))* ")";
	ExpressionList = Expression ("," Expression)*;
	TypeList = TypeName ("," TypeName)*;

	GenericParam = TypeName | IDENTIFIER | Lifetime
	GenericParams = "<" GenericParam ("," GenericParam)* ">";
	GenericArgs = "<" (TypeName | Expression | Lifetime)* ">";

	IntLiteral = DIGIT+;
	FloatLiteral = DIGIT+ "." DIGIT+;
	CharLiteral = "\'" CHARACTOR "\'";
	StringLiteral = C_STRING_LITERAL;

	WhereClause = "where" Expression

	// Types:
	GroupedType = "(" TypeName ")";
	PointerType = TypeName "mut"? "*";
	ReferenceType = TypeName "mut"? "&" Lifetime?;
	ArrayType = TypeName "mut"? "[" IntLiteral "]";
	FuncPtr = "mut"? "(" TypeList ")" "->" TypeName;
	GenericType = IDENTIFIER GenericArgs

	TypeName = GroupedType			|
			   PointerType			|
			   ReferenceType		|
			   FuncPtr				|
			   GenericType			|
			   ("mut"? IDENTIFIER);

	Lifetime = "'" IDENTIFIER;

	ClassVisibility = "public" | "private";

	// Expressions:
	InitalizerList = "{" ExpressionList "}";

	Grouping = "(" Expression ")";
	MemberSelection = Expression ("." IDENTIFIER)*;
	Construction = TypeName "(" ExpressionList? ")";

	Sizeof = "sizeof" "<" TypeName ">" "(" ")";

	Primary = IntLiteral			|
			  "nullptr"				|
			  Lifetime				|
	          FloatLiteral			|
			  Grouping				|
			  "true"				|
			  "false"				|
			  StringLiteral			|
			  CharLiteral			|
			  QualifiedIdentifier	|
			  InitalizerList		|
			  MemberSelection		|
			  Construction;
			  

	Call = Primary "(" ExpressionList? ")";
	Index = Expression "[" Expression "]";

	Unary = ("!" | "-" | "&" "mut"? | "*") Unary | (Call | Index);

	Factor = Unary (("*" | "/" | "%") Unary)*
	Term = Factor (("+" | "-") Factor)*
	Comparison = Factor ((">=" | ">" | "<" | "<=") Factor)*
	Equality = Comparison (("!=" | "==") Comparison)*;

	LogicalAnd = Equality ("&&" Equality)*;
	LogicalOr = LogicalAnd ("||" LogicalOr)*;

	Casting = LogicalOr ("as" TypeName)*

	Assignment = Casting "=" Assignment | Casting;

	Expression = Assignment;

	// Statements:
	ExprStmt = Expression ";";
	Block = "{" Statement* "}";
	UnsafeBlock = "unsafe" "{" Statement* "}";
	IfStmt = "if" "(" Expression ")" Statement;
	ForStmt = "for" "(" VarDecl? ";" Expression? ";" Expression? ";" ")" Statement;
	WhileStmt = "while" "(" Expression ")" Statement;
	ReturnStmt = "return" Expression? ";";
	BreakStmt = "break" ";";
	ContinueStmt = "continue" ";";

	// Declarations:
	VarDecl = "unsafe"? TypeName IDENTIFIER ("," IDENTIFIER)* ("=" Expression)? ";";
	FuncDecl = "unsafe"? "func" IDENTIFIER GenericParams? Parameters "->" TypeName WhereClause? Block;
	ExternFuncDecl = "extern" StringLiteral "func" IDENTIFIER Parameters "->"  TypeName ";";


	ThisParameter = "this" "mut"? ("&" Lifetime)?;
	MemberFuncParams = "(" ThisParameter? ","? (TypeName IDENTIFIER ("," TypeName IDENTIFIER)*)? ")";
	MemberFuncDecl = "unsafe"? "func" IDENTIFIER GenericParams? MemberFuncParams "->" TypeName WhereClause? Block;

	Constructor = "unsafe"? IDENTIFIER GenericParams? Parameters Block;
	Destructor = "unsafe"? "~" IDENTIFIER "(" ")" Block;

	MemberDecl = ClassVisibility (VarDecl | MemberFuncDecl | Constructor | Destructor);
	ClassDecl = "unsafe"? "class" IDENTIFIER GenericParams? WhereClause? "{" MemberDecl* "}";

	ExternClassMemberDecl = "public" TypeName IDENTIFIER ";";
	ExternClassDecl = "unsafe"? "extern" StringLiteral "class" IDENTIFIER "{" ExternClassMemberDecl* "}";

	Statement = ExprStmt		| 
				Block			| 
				IfStmt			| 
				ForStmt			| 
				WhileStmt		| 
				VarDecl			| 
				ReturnStmt		| 
				ContinueStmt	| 
				BreakStmt;
	
	Declaration = VarDecl			|
				  FuncDecl			|
				  ExternFuncDecl	|
				  ClassDecl			|
				  ExternClassDecl;

	File = Declaration* EOF;

	main Program = File*;
}